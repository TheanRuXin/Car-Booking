# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
from pathlib import Path
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, Label,messagebox,PhotoImage,StringVar,ttk
import sqlite3, sys, subprocess
# Capture the car_id from the command-line argument
from PIL import Image, ImageTk
from datetime import datetime
from tkcalendar import DateEntry

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\car rental booking system\build\assets\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def go_back():
    window.destroy()
    subprocess.Popen([sys.executable, "car.py"])

def create_bookings_table():
    try:
        conn = sqlite3.connect(r"C:\car rental booking system\Car-Booking\Users.db")
        cursor = conn.cursor()
        cursor.execute(''' 
            CREATE TABLE IF NOT EXISTS bookings (
                booking_id INTEGER PRIMARY KEY AUTOINCREMENT,
                car_id INTEGER,
                customer_name TEXT,
                email TEXT,
                contact_number TEXT,     
                date_of_birth TEXT,    
                rental_start_date TEXT,    
                rental_end_date TEXT,
                promotion TEXT,
                total_price REAL,
                status TEXT DEFAULT 'Pending',
                FOREIGN KEY(car_id) REFERENCES cars(id),
                user_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        conn.commit()
        print("Bookings table created successfully.")
    except sqlite3.Error as e:
        print("Error creating bookings table:", e)
    finally:
        conn.close()

create_bookings_table()

window = Tk()
window.geometry("1221x773")
window.configure(bg="#FFFFFF")

def connect_db():
    return sqlite3.connect(r"C:\car rental booking system\Car-Booking\Users.db")

# Ensure bookings table is created
def get_selected_car_details(car_id):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT make_and_model, daily_rate, seating_capacity, car_type, transmission_type, image_path FROM cars WHERE id = ?", (car_id,))
    car = cursor.fetchone()
    conn.close()
    return car

def get_user_id(email, password):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE email=? AND password=?", (email, password))
    user = cursor.fetchone()
    conn.close()
    if user:
        return user[0]  # Return user ID if found
    else:
        return None

def fetch_promotions():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT promo_code, discount_percentage FROM promotions")
    promotions = cursor.fetchall()  # Returns a list of tuples [(code, discount), ...]
    conn.close()
    return promotions

def create_booking_page(car_id):
    # Create the Tkinter window once
    global window
    if 'window' not in globals() or not window.winfo_exists():
        window = Tk()

    car_details = get_selected_car_details(car_id)
    if not car_details:
        print("Car details not found.")
        return

    make_and_model, daily_rate, seating_capacity, car_type, transmission_type, image_path = car_details

    # Canvas creation for layout
    canvas = Canvas(window, bg="#FFFFFF", height=773, width=1221, bd=0, highlightthickness=0, relief="ridge")
    canvas.place(x=0, y=0)

    canvas.create_rectangle(
        0.0,
        0.0,
        1221.0,
        113.0,
        fill="#DFDFDF",
        outline="")

    if image_path:
        try:
            pil_image = Image.open(image_path)  # Open image from file path
            resized_image = pil_image.resize((250, 200), Image.LANCZOS)  # Resize if needed
            image_to_display = ImageTk.PhotoImage(resized_image)

            # Place the image on the canvas
            canvas.create_image(
                250, 150,  # Adjust these coordinates to position the image within the blue area
                image=image_to_display,
                anchor="nw"
            )

            # Retain a reference to prevent garbage collection
            canvas.image_to_display = image_to_display
        except Exception as e:
            print("Error loading image:", e)

    car_brand_label = Label(window, text=f"{make_and_model}", font=("Arial", 14, "bold"), bg="#FFFFFF")
    car_price_label = Label(window, text=f"Price: RM {daily_rate}", font=("Arial", 12), bg="#FFFFFF")
    car_seats_label = Label(window, text=f"Seats: {seating_capacity}", font=("Arial", 12), bg="#FFFFFF")
    car_type_label = Label(window, text=f"Car Type: {car_type}", font=("Arial", 12), bg="#FFFFFF")
    car_transmission_label = Label(window, text=f"Transmission: {transmission_type}", font=("Arial", 12),
                                   bg="#FFFFFF")
    car_brand_label.place(x=50, y=200)
    car_price_label.place(x=50, y=230)
    car_seats_label.place(x=50, y=260)
    car_type_label.place(x=50, y=290)
    car_transmission_label.place(x=50, y=320)

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        86.0,
        57.0,
        image=image_image_1
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_1 clicked"),
        relief="flat"
    )
    button_1.place(
        x=1126.0,
        y=31.0,
        width=49.0,
        height=49.0
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_2.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: print("button_2 clicked"),
        relief="flat"
    )
    button_2.place(
            x=969.0,
            y=36.0,
            width=132.0,
            height=40.0
        )

    button_image_4 = PhotoImage(
             file=relative_to_assets("button_4.png"))
    button_4 = Button(
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
    button_4.place(
            x=854.0,
            y=30.0,
            width=90.0,
            height=52.0
        )

    button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
    button_5 = Button(
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )
    button_5.place(
            x=784.0,
            y=30.0,
            width=70.0,
            height=52.0
        )

    canvas.create_text(
            39.0,
            125.0,
            anchor="nw",
            text="BOOK A CAR",
            fill="#000000",
            font=("Century", 30 * -1)
        )

    canvas.create_text(
            39.0,
            394.0,
            anchor="nw",
            text="Name:",
            fill="#000000",
            font=("KaiseiDecol Medium", 20 * -1)
        )

    canvas.create_text(
            39.0,
            451.0,
            anchor="nw",
            text="Email:",
            fill="#000000",
            font=("KaiseiDecol Medium", 20 * -1)
        )

    canvas.create_text(
            39.0,
            565.0,
            anchor="nw",
            text="Date of birth:",
            fill="#000000",
            font=("KaiseiDecol Medium", 20 * -1)
        )

    canvas.create_text(
            550.0,
            394.0,
            anchor="nw",
            text="Rental Start Date (YYYY-MM-DD):",
            fill="#000000",
            font=("KaiseiDecol Medium", 20 * -1)
        )

    canvas.create_text(
            550.0,
            451.0,
            anchor="nw",
            text="Rental End Date (YYYY-MM-DD):",
            fill="#000000",
            font=("KaiseiDecol Medium", 20 * -1)
        )

    canvas.create_text(
            39.0,
            508.0,
            anchor="nw",
            text="Contact Number:",
            fill="#000000",
            font=("KaiseiDecol Medium", 20 * -1)
        )

    name_entry = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
    name_entry.place(
            x=110.0,
            y=394.0,
            width=277.0,
            height=28.0
        )

    email_entry = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
    email_entry.place(
            x=110.0,
            y=450.0,
            width=277.0,
            height=28.0
        )

    contact_num_entry = Entry(
            bd=0,
            bg="#D9D9D9",
            fg="#000716",
            highlightthickness=0
        )
    contact_num_entry.place(
            x=205.0,
            y=508.0,
            width=277.0,
            height=28.0
        )
    promotion_var = StringVar()
    # Fetch promotions from the database
    promotions = fetch_promotions()
    promo_options = ["None"] + [f"{code} ({discount}%)" for code, discount in promotions]

    # Promotion Dropdown
    Label(window, text="Select Promotion:", font=("KaiseiDecol Medium", 20 * -1), bg="#FFFFFF").place(x=547, y=508)
    promotion_dropdown = ttk.Combobox(window, textvariable=promotion_var, values=promo_options, state="readonly")
    promotion_dropdown.current(0)  # Default to "None"
    promotion_dropdown.place(x=880, y=510, width=277, height=28)

    button_image_6 = PhotoImage(
        file=relative_to_assets("button_6.png"))
    book_button = Button(
        image=button_image_6,
        borderwidth=0,
        highlightthickness=0,
        command=lambda:submit_booking(user_id),
        relief="flat"
    )
    book_button.place(
        x=1029.0,
        y=662.0,
        width=104.0,
        height=49.0
    )

    back_button = Button(
        window,
        text="BACK",
        font=("Helvetica", 16),
        bg="black",
        fg="white",
        command=lambda: go_back()
    )
    back_button.place(
        x=900.0,
        y=662.0,
        width=104.0,
        height=49.0
    )

    # Car details labels
    Label(window, text=f"{make_and_model}", font=("Arial", 14, "bold"), bg="#FFFFFF").place(x=50, y=200)
    Label(window, text=f"Price: RM {daily_rate}", font=("Arial", 12), bg="#FFFFFF").place(x=50, y=230)
    Label(window, text=f"Seats: {seating_capacity}", font=("Arial", 12), bg="#FFFFFF").place(x=50, y=260)
    label_breakdown = Label(window, text="", font=("Times New Roman", 14),bg="white",justify="left")
    label_breakdown.place(x=700, y=180)

    def calculate_total_price(car_id):
        conn = None
        try:
            # Fetch rental dates from the GUI
            start_date = ren_start_entry.get()
            end_date = ren_end_entry.get()

            # Convert dates to datetime objects to calculate days
            start_date_obj = datetime.strptime(start_date, '%Y-%m-%d').date()
            end_date_obj = datetime.strptime(end_date, '%Y-%m-%d').date()
            current_date = datetime.today().date()
            days = (end_date_obj - start_date_obj).days

            # Check if the rental period is valid
            if end_date_obj < start_date_obj:
                messagebox.showerror("Error","End date must be after start date.")
                return None

            if start_date_obj < current_date:
                messagebox.showerror("Error", "Start date cannot be in the past.")
                return None

            # Connect to the database to get the daily rate for the selected car
            conn = sqlite3.connect('Users.db')
            cursor = conn.cursor()

            # Fetch daily rental price based on car ID or type (use appropriate query as needed)
            cursor.execute("SELECT daily_rate FROM cars WHERE id = ?", (car_id,))
            daily_rate = cursor.fetchone()[0]
            total_price = days * daily_rate

            selected_promo = promotion_var.get()
            discount = 0
            if selected_promo != "None":
                for code, discount_pct in promotions:
                    if f"{code} ({discount_pct}%)" == selected_promo:
                        discount = discount_pct / 100
                        break
            total_price *= (1 - discount)

            label_breakdown.config(
                text=f"Rental Days: {days} days\nDaily Rate: RM {daily_rate}\nDiscount: {int(discount * 100)}%\nTotal Price: RM {total_price:.2f}")
            conn.close()
            return total_price  # Return total price and discount percentage

        except Exception as e:
            messagebox.showerror("Error", str(e))

    calculate_button = Button(
        window,
        text="Calculate",
        font=("Helvetica", 10),
        bg="black",
        fg="white",
        command=lambda: calculate_total_price(car_id)
    )
    calculate_button.place(
        x=950.0,
        y=310.0,
        width=65.0,
        height=30.0
    )
    ren_start_entry = DateEntry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0,
        date_pattern="yyyy-mm-dd"
    )
    ren_start_entry.place(
        x=880.0,
        y=392.0,
        width=277.0,
        height=28.0
    )

    birthdate_entry = Entry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0
    )
    birthdate_entry.place(
        x=170.0,
        y=566.0,
        width=277.0,
        height=29.0
    )

    ren_end_entry = DateEntry(
        bd=0,
        bg="#D9D9D9",
        fg="#000716",
        highlightthickness=0,
        date_pattern="yyyy-mm-dd"
    )
    ren_end_entry.place(
        x=880.0,
        y=451.0,
        width=277.0,
        height=28.0
    )

    def submit_booking(user_id):
        # Retrieve the data from the form
        customer_name = name_entry.get().strip()
        email = email_entry.get().strip()
        contact_number = contact_num_entry.get().strip()
        date_of_birth = birthdate_entry.get().strip()
        rental_start_date = ren_start_entry.get().strip()
        rental_end_date = ren_end_entry.get().strip()
        selected_promotion = promotion_var.get() or ""

        # Check if any of the fields are empty
        if not customer_name or not email or not contact_number or not date_of_birth or not rental_start_date or not rental_end_date or not selected_promotion:
            messagebox.showerror("Error", "Please fill in all fields.")  # Show error if any field is empty
            return

        # Validate that rental start and end dates are valid (optional)
        # Assuming the format for the dates is 'YYYY-MM-DD'
        try:
            start_date = datetime.strptime(rental_start_date, '%Y-%m-%d').date()
            end_date = datetime.strptime(rental_end_date, '%Y-%m-%d').date()

            if end_date < start_date:
                messagebox.showerror("Error", "End date cannot be earlier than start date.")
                return
        except ValueError:
            messagebox.showerror("Error", "Please enter valid date formats (YYYY-MM-DD).")
            return

        # Calculate total price
        total_price = calculate_total_price(car_id)
        if total_price is None:
            messagebox.showerror("Error", "Could not calculate total price.")
            return

        # Insert booking into the database
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO bookings (car_id, customer_name, email, contact_number, date_of_birth, rental_start_date, rental_end_date, promotion, total_price, user_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            car_id,
            customer_name,
            email,
            contact_number,
            date_of_birth,
            rental_start_date,
            rental_end_date,
            selected_promotion,
            total_price,
            user_id
        ))

        conn.commit()
        conn.close()

        # Show success message
        messagebox.showinfo("Success", "Booking submitted successfully!")

        # Close the booking window after submission
        window.destroy()

    window.resizable(False, False)
    window.mainloop()

if __name__ == "__main__":
    # Check if car_id was passed as a command-line argument
    if len(sys.argv) > 1:
        car_id = int(sys.argv[1])  # Convert the argument to an integer
    else:
        car_id = 1  # Default to a specific car_id if none is passed

    create_booking_page(car_id)

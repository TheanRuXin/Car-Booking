from pathlib import Path
from tkinter import messagebox
import sqlite3
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,Label ,LEFT, messagebox,IntVar,Frame
from PIL import Image, ImageTk
import sys,subprocess
# Define asset paths
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\User\Documents\Ruxin file\build\build\assets\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def connect_db():
    return sqlite3.connect(r"C:\Users\User\Documents\Ruxin file\build\Car_Rental.db")

def go_back(user_id):
    window.withdraw()
    subprocess.Popen([sys.executable,r"C:\Users\User\Documents\Ruxin file\build\profile.py",str(user_id)])

def profile_page(user_id):
    window.withdraw()
    subprocess.Popen([sys.executable,r"C:\Users\User\Documents\Ruxin file\build\profile.py",str(user_id)])

def submit_review(car_id):
    customer_name = customer_name_entry.get().strip()
    review_text = review_entry.get().strip()
    rating = rating_var.get()
    if not customer_name or not review_text or rating == 0:
        messagebox.showerror("Error", "All fields are required!")
        return
    try:
        conn = sqlite3.connect(r"C:\Users\User\Documents\Ruxin file\build\Car_Rental.db")  # Changed database to Car_Rental.db
        cursor = conn.cursor()
        cursor.execute('''
        INSERT INTO Reviews (user_id, customer_name, review, rating,car_id)
        VALUES (?, ?, ?, ?,?)
        ''', (user_id, customer_name, review_text, rating,car_id))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", "Review submitted successfully!")
        customer_name_entry.delete(0, 'end')
        review_entry.delete(0,'end')
        clear_stars()
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {e}")

# Clear rating stars
def clear_stars():
    rating_var.set(0)
    update_star_display()

# Update star display based on rating
def update_star_display():
    rating = rating_var.get()
    for i in range(5):
        if i < rating:
            star_buttons[i].configure(text="★",fg='gold')  # Filled star
        else:
            star_buttons[i].configure(text="☆",fg='grey')  # Empty star

# Set rating and update stars
def set_star_rating(value):
    rating_var.set(value)
    update_star_display()

def get_selected_car_details(car_id):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT registration_number , make_and_model  FROM cars_details WHERE id = ?", (car_id,))
    car = cursor.fetchone()
    conn.close()
    return car

if __name__ == "__main__":
    if len(sys.argv) < 3:
        messagebox.showerror("Error", "User ID and Car ID are required!")
        sys.exit(1)

    user_id = int(sys.argv[1])
    car_id = int(sys.argv[2])

    car_details = get_selected_car_details(car_id)
    if not car_details:
        messagebox.showerror("Error", "Car details not found!")
        sys.exit(1)

    registration_number, make_and_model = car_details

    window = Tk()
    window.geometry("1221x773")
    window.configure(bg="#FFFFFF")
    canvas = Canvas(window, bg="#FFFFFF", height=773, width=1221, bd=0, highlightthickness=0, relief="ridge")
    canvas.place(x=0, y=0)
    canvas.create_rectangle(0.0, 0.0, 1221.0, 113.0, fill="#DFDFDF", outline="")

    image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(610.0, 443.0, image=image_image_1)

    button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
    button_1 = Button(image=button_image_1, borderwidth=0, highlightthickness=0, command=lambda: profile_page(user_id),
                      relief="flat")
    button_1.place(x=1126.0, y=31.0, width=49.0, height=49.0)

    button_submit = Button(window, text="Submit", command=lambda: submit_review(car_id), bg="yellow", fg="black",
                           font=("KaiseiDecol Medium", 16 * -1))
    button_submit.place(x=350, y=600, width=100, height=50)

    button_back = Button(window, text="Back", command=lambda: go_back(user_id), bg="black", fg="yellow",
                         font=("KaiseiDecol Medium", 16 * -1))
    button_back.place(x=650, y=600, width=100, height=50)

    canvas.create_text(56.0, 138.0, anchor="nw", text="Rating and Reviews", fill="#000000",
                       font=("KaiseiDecol Medium", 40 * -1))

    Label(window, text=f"{registration_number} {make_and_model}", font=("Arial", 20, "bold"), bg="#FFFFFF").place(x=56, y=200)

    canvas.create_text(56.0, 250.0, anchor="nw", text="Rating:", fill="#000000", font=("KaiseiDecol Medium", 20 * -1))
    canvas.create_text(56.0, 400.0, anchor="nw", text="Customer Name:", fill="#000000",
                       font=("KaiseiDecol Medium", 20 * -1))
    canvas.create_text(700.0, 400.0, anchor="nw", text="Reviews:", fill="#000000", font=("KaiseiDecol Medium", 20 * -1))

    customer_name_entry = Entry(bd=0, bg="#FBFFA6", fg="#000716", highlightthickness=0,
                                font=("KaiseiDecol Medium", 16 * -1))
    customer_name_entry.place(x=56, y=430, height=30, width=300)

    review_entry = Entry(bd=0, bg="#FBFFA6", fg="#000716", highlightthickness=0, font=("KaiseiDecol Medium", 20 * -1))
    review_entry.place(x=700, y=430, height=100, width=400)

    rating_var = IntVar(value=0)

    star_buttons = []
    for i in range(1, 6):
        star_button = Button(window, text="☆", width=15, font=("KaiseiDecol Medium", 20 * -1),
                             command=lambda value=i: set_star_rating(value))
        star_button.place(x=130 + (i - 1) * 200, y=300)
        star_buttons.append(star_button)
    window.resizable(False, False)
    window.mainloop()

from tkcalendar import DateEntry
from datetime import datetime,date
from PIL import Image, ImageTk
import sqlite3,os
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
from pathlib import Path
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, Label, Entry, filedialog, messagebox
from tkinter.ttk import Treeview


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\car rental booking system\build\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def connect_db():
    return sqlite3.connect(r"C:\car rental booking system\Car-Booking\Users.db")

selected_promotion_id = None

def create_promotions_table():
    conn = connect_db()
    cursor = conn.cursor()

    # Recreate the table with the correct schema
    cursor.execute(''' 
        CREATE TABLE IF NOT EXISTS promotions (
            promotion_id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            description TEXT,
            discount_percentage REAL,
            start_date TEXT,
            end_date TEXT,
            promo_code TEXT,
            image_path TEXT
        )
    ''')

    conn.commit()
    conn.close()

create_promotions_table()

# Fetch all promotions from the database
def fetch_promotions():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT promotion_id, name, description, discount_percentage, start_date, end_date, promo_code, image_path FROM promotions")
    promotions = cursor.fetchall()
    conn.close()
    return promotions

def add_promotion(name, description, discount, start_date, end_date, promo_code, image_path):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO promotions (name, description, discount_percentage, start_date, end_date, promo_code, image_path)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    ''', (name, description, discount, start_date, end_date, promo_code,image_path))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Promotion added successfully!")
    display_promotions()

# Display all promotions in the Treeview
def display_promotions():
    promotion_tree.delete(*promotion_tree.get_children())  # Clear the Treeview first
    promotions = fetch_promotions()
    for promo in promotions:
        promotion_tree.insert(
            "", "end", values=(promo[0], promo[1], promo[2], f"{promo[3]}%", promo[4], promo[5], promo[6], promo[7])
        )

def add_promotion_page():
    global promotion_tree, image_preview_label, name_entry, description_entry, discount_entry, start_date_entry, end_date_entry, promo_code_entry, image_path_var
    image_path_var = None
    selected_promotion_id = None  # To store the ID of the selected promotion

    def clear_button():
        name_entry.delete(0, 'end')
        description_entry.delete(0, 'end')
        discount_entry.delete(0, 'end')
        start_date_entry.set_date(date.today())
        end_date_entry.set_date(date.today())
        promo_code_entry.delete(0, 'end')
        image_preview_label.config(image='')
        global image_path_var
        image_path_var = ""  # Reset image path variable

    def delete_button():
        global selected_promotion_id
        if selected_promotion_id is None:
            messagebox.showerror("Error", "No promotion selected for deletion.")
            return

        response = messagebox.askyesno("Delete Confirmation", "Are you sure you want to delete this promotion?")
        if response:
            conn = connect_db()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM promotions WHERE promotion_id = ?", (selected_promotion_id,))
            conn.commit()
            conn.close()

            messagebox.showinfo("Success", "Promotion deleted successfully!")
            clear_button()  # Clear fields after deletion
            display_promotions()  # Refresh the Treeview

    window = Tk()
    window.geometry("1221x773")
    window.title("Promotions")
    window.configure(bg="#FFFFFF")

    canvas = Canvas(window,bg="#FFFFFF",height=773,width=1221,bd=0,highlightthickness=0,relief="ridge")
    canvas.place(x=0, y=0)
    image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(610.0, 386.0,image=image_image_1)

    canvas.create_text(600, 40, text="Current Promotions", font=("Arial", 14), anchor="center")

    # Treeview to display promotions with scrollbar
    columns = ("promotion_id", "name", "description", "discount", "start_date", "end_date", "promo_code", "image_path")
    promotion_tree = Treeview(window, columns=columns, show="headings", height=10)

    promotion_tree.heading("promotion_id", text="Promotion ID")
    promotion_tree.heading("name", text="Promotion Name")
    promotion_tree.heading("description", text="Description")
    promotion_tree.heading("discount", text="Discount Percentage")
    promotion_tree.heading("start_date", text="Start Date")
    promotion_tree.heading("end_date", text="End Date")
    promotion_tree.heading("promo_code", text="Promo Code")
    promotion_tree.heading("image_path", text="Image Path")

    # Configure column widths
    promotion_tree.column("promotion_id", width=100)
    promotion_tree.column("name", width=150)
    promotion_tree.column("description", width=200)
    promotion_tree.column("discount", width=120)
    promotion_tree.column("start_date", width=100)
    promotion_tree.column("end_date", width=100)
    promotion_tree.column("promo_code", width=100)
    promotion_tree.column("image_path", width=200)

    promotion_tree.place(x=65.0, y=70.0, width=1100.0, height=200.0)
    # Fetch and display promotions initially
    display_promotions()

    # Fields for adding a new promotion
    canvas.create_text(600, 300, text="Add New Promotion", font=("Arial", 14), anchor="center")

    canvas.create_text(600, 350, text="Promotion Name", font=("Arial", 12), anchor="center")
    name_entry = Entry(bd=0, bg="white", fg="#000716", highlightthickness=0)
    name_entry.place(x=453.0, y=370.0, width=300.0, height=22.0)

    canvas.create_text(600, 410, text="Description", font=("Arial", 12), anchor="center")
    description_entry = Entry(bd=0, bg="white", fg="#000716", highlightthickness=0)
    description_entry.place(x=453.0, y=430.0, width=300.0, height=22.0)

    canvas.create_text(600, 470, text="Discount Percentage", font=("Arial", 12), anchor="center")
    discount_entry = Entry(bd=0, bg="white", fg="#000716", highlightthickness=0)
    discount_entry.place(x=453.0, y=490.0, width=300.0, height=22.0)

    canvas.create_text(600, 530, text="Start Date", font=("Arial", 12), anchor="center")
    start_date_entry = DateEntry(window, width=47, background='grey', foreground='white', date_pattern="yyyy-mm-dd")
    start_date_entry.place(x=453.0, y=550.0, width=300.0, height=22.0)

    canvas.create_text(600, 590, text="End Date", font=("Arial", 12), anchor="center")
    end_date_entry = DateEntry(window, width=47, background='grey', foreground='white', date_pattern="yyyy-mm-dd")
    end_date_entry.place(x=453.0, y=610.0, width=300.0, height=22.0)

    canvas.create_text(600, 650, text="Promo Code", font=("Arial", 12), anchor="center")
    promo_code_entry = Entry(bd=0, bg="white", fg="#000716", highlightthickness=0)
    promo_code_entry.place(x=453.0, y=670.0, width=300.0, height=22.0)

    def select_image():
        global image_path_var
        image_path_var = filedialog.askopenfilename(title="Select Image",
                                                    filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])
        if image_path_var:
            display_image_preview(image_path_var)

    image_preview_label = Label(window)
    image_preview_label.place(x=800, y=400)

    def display_image_preview(image_path):
        if not image_path or not os.path.isfile(image_path):
            # Display a default message or clear the label if no image is available
            image_preview_label.config(image='', text="No Image Selected")
            return

        try:
            img = Image.open(image_path)
            img = img.resize((200, 150), Image.LANCZOS)
            tk_img = ImageTk.PhotoImage(img)
            image_preview_label.config(image=tk_img, text='')  # Clear any previous text
            image_preview_label.image = tk_img
        except PermissionError:
            messagebox.showerror("Error", "Permission denied when trying to open the image.")

    def on_add_promotion():
        name = name_entry.get()
        description = description_entry.get()
        discount = discount_entry.get()
        start_date = start_date_entry.get()
        end_date = end_date_entry.get()
        promo_code = promo_code_entry.get()
        current_date = datetime.today()

        if not name or not description or not discount or not start_date or not end_date or not promo_code:
            messagebox.showerror("Error", "Please fill in all fields.")  # Show error if any field is empty
            return

        try:
            discount = float(discount_entry.get())
            if discount <= 0 or discount > 100:
                raise ValueError("Discount must be between 0 and 100.")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid discount percentage (0-100).")
            return

        # Validation for dates
        if datetime.strptime(start_date, '%Y-%m-%d') < current_date:
            messagebox.showerror("Error", "Start date cannot be in the past.")
            return

        if datetime.strptime(start_date, '%Y-%m-%d') > datetime.strptime(end_date, '%Y-%m-%d'):
            messagebox.showerror("Error", "End date must be after start date.")
            return

        add_promotion(name, description, discount, start_date, end_date, promo_code, image_path_var)
        display_promotions()

    def populate_fields(event):
        global image_path_var, selected_promotion_id
        selected_item = promotion_tree.selection()
        if selected_item:
            item_data = promotion_tree.item(selected_item, "values")
            selected_promotion_id = item_data[0]
            print("Selected promotion ID:", selected_promotion_id)  # Debug print to confirm selection

            name_entry.delete(0, 'end')
            name_entry.insert(0, item_data[1])  # Promotion Name

            description_entry.delete(0, 'end')
            description_entry.insert(0, item_data[2])  # Description

            discount_entry.delete(0, 'end')
            discount_entry.insert(0, item_data[3].replace("%", ""))  # Discount Percentage

            start_date_entry.set_date(item_data[4])  # Start Date
            end_date_entry.set_date(item_data[5])  # End Date

            promo_code_entry.delete(0, 'end')
            promo_code_entry.insert(0, item_data[6])

            image_path_var = item_data[7]  # Image Path
            display_image_preview(image_path_var)  # Display Image Preview

        # Function to update promotion details in the database

    def update_promotion():
        global selected_promotion_id
        if selected_promotion_id is None:
            messagebox.showerror("Error", "No promotion selected for update.")
            return

        name = name_entry.get()
        description = description_entry.get()
        start_date = start_date_entry.get()
        end_date = end_date_entry.get()
        promo_code = promo_code_entry.get()
        current_date = datetime.today()

        try:
            discount = float(discount_entry.get())
            if discount <= 0 or discount > 100:
                raise ValueError("Discount must be between 0 and 100.")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid discount percentage (0-100).")
            return

        # Validation for dates
        if datetime.strptime(start_date, '%Y-%m-%d') < current_date:
            messagebox.showerror("Error", "Start date cannot be in the past.")
            return

        if datetime.strptime(start_date, '%Y-%m-%d') > datetime.strptime(end_date, '%Y-%m-%d'):
            messagebox.showerror("Error", "End date must be after start date.")
            return

        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute('''
               UPDATE promotions
               SET name = ?, description = ?, discount_percentage = ?, start_date = ?, end_date = ?, promo_code = ?, image_path = ?
               WHERE promotion_id = ?
           ''', (name, description, discount, start_date, end_date, promo_code, image_path_var, selected_promotion_id))

        conn.commit()
        conn.close()

        messagebox.showinfo("Success", "Promotion updated successfully!")
        display_promotions()
        selected_promotion_id = None

    promotion_tree.bind("<<TreeviewSelect>>", populate_fields)

    # Update Button
    Button(window, text="Select Image", command=select_image).place(x=830.0, y=580.0, width=150.0, height=30.0)
    Button(window, text="Add Promotion", command=on_add_promotion,font=("Arial", 10)).place(x=150.0, y=380.0, width=150.0, height=30.0)
    Button(window, text="Update Promotion", command=update_promotion, font=("Arial", 10)).place(x=150.0, y=430.0, width=150.0, height=30.0)
    Button(window, text="Clear", command=clear_button,font=("Arial", 10)).place(x=150.0, y=480.0, width=150.0, height=30.0)
    Button(window, text="Delete Promotion", command=delete_button,font=("Arial", 10)).place(x=150.0, y=530.0, width=150.0, height=30.0)
    Button(window, text="Back",font=("Arial", 10)).place(x=150.0, y=580.0, width=150.0, height=30.0)

    window.resizable(False, False)
    window.mainloop()

add_promotion_page()
